{"version":3,"sources":["serviceWorker.js","components/protectedRouteComponent/authentication.js","components/url.js","components/loginComponent/index.js","components/headerComponent/index.js","components/boardsComponent/index.js","components/protectedRouteComponent/index.js","components/registerComponent/index.js","components/boardItemsComponent/wellItemComponent/index.js","components/boardItemsComponent/improveItemComponent/index.js","components/boardItemsComponent/actionItemComponent/index.js","components/boardItemsComponent/index.js","components/detailABoardComponent/index.js","components/userComponent/index.js","index.js"],"names":["Boolean","window","location","hostname","match","this","authenticated","cb","isDev","useStyles","makeStyles","paperContainer","paddingTop","paddingLeft","paddingRight","paddingBottom","googleLoginBtn","marginTop","width","theme","createMuiTheme","overrides","MuiCssBaseline","body","backgroundImage","background","backgroundColor","title","flexGrow","whiteColor","color","Header","props","useState","open","setOpen","userName","setUserName","history","useHistory","anchorRef","useRef","classes","useEffect","a","bearer","localStorage","getItem","fetch","URL","getUrl","method","headers","Headers","data","json","result","user","username","getData","handleClickProfile","push","handleClose","event","current","contains","target","handleClickLogout","removeItem","Auth","logOut","handleListKeyDown","key","preventDefault","prevOpen","React","focus","AppBar","position","className","Toolbar","Typography","variant","to","Button","ref","aria-controls","undefined","aria-haspopup","onClick","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","id","onKeyDown","MenuItem","container","padding","myBoardStyle","fontWeight","functionBar","addBoardStyle","borderStyle","borderWidth","borderColor","margin","addBoardIcon","fontSize","display","deleteBoardBtn","float","border","opacity","spacing","palette","default","PrivateRoute","Component","component","rest","render","routeProps","isAuthenticated","itemBoard","marginBottom","maxWidth","textFieldContainer","contentStyle","wordWrap","addButton","squareColor","doneButton","borderRadius","WellColumn","well","listChangeWell","handleAdd","handleChangeContentClick","handleChangeContent","handleChangeTextDone","handleDelete","Grid","direction","item","fullWidth","map","value","join","toString","includes","TextField","multiline","rowsMax","content","onChange","clear","ImproveColumn","improve","listChangeImprove","ActionColumn","action","listChangeAction","boardContainer","BoardItems","xs","sm","md","lg","marginRight","changeNameButton","marginLeft","textFieldChangeName","infoContainer","changeButton","profileTitle","textAlign","fontStyle","ReactDOM","StrictMode","exact","path","password","loginData","setLoginData","message","setMessage","submitLogin","e","mode","JSON","stringify","response","ok","then","setItem","token","logIn","responseGoogle","profileObj","CssBaseline","justify","alignItems","height","elevation","onSubmit","name","label","type","clientId","buttonText","onSuccess","onFailure","cookiePolicy","rawBoardsData","setRawBoardsData","boardsData","setBoardsData","boardName","setBoardName","boards","getBoardData","options","scales","xAxes","ticks","beginAtZero","gridLines","yAxes","reverse","legend","labels","datasets","parseInt","count","count2","count3","handleSubmitCreate","success","handleClickDeleteBoard","i","confirm","url","temptBoard","forEach","splice","Container","textSearch","filtedData","filter","toLowerCase","Dialog","onClose","aria-labelledby","DialogTitle","DialogContentText","DialogContent","autoFocus","DialogActions","date","toLocaleString","month","idBoard","setIDBoard","nameBoard","setNameBoard","setWell","setImprove","setAction","setListChangeWell","setListChangeImprove","setListChangeAction","tempId","setTempId","query","URLSearchParams","useLocation","search","get","Wells","Improves","Actions","upsertContent","tableName","object","idWell","wellContent","trim","replaceAll","tempWell","slice","element","tempImproves","tempActions","deleteInDatabase","nameTable","handleClickChangeName","size","newContent","split","tempImprove","tempAction","splitedId","columnName","idOfChangeObjectInList","idOfChangeObjectInListChange","indexOf","setUser","isChangePassword","setIsChangePassword","setPassword","newPassword","setNewPassword","passwordMessage","setPasswordMessage","res","handleChangePasswordClick","handleSubmitChangeInfo","console","log","email","handleSubmitChangePassword","newpassword","Input","Link","newEmail","tempUser","newUser","registerData","setRegisterData","isSuccess","setIsSuccess","submitRegister","href","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9aed0889.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","class Auth {\r\n    constructor()\r\n    {\r\n        this.authenticated = false;\r\n    }\r\n\r\n    logIn(cb){\r\n        this.authenticated = true;\r\n        cb();\r\n    }\r\n    logOut(cb)\r\n    {\r\n        this.authenticated = false;\r\n        cb();\r\n    }\r\n    isAuthenticated() {\r\n        return this.authenticated;\r\n      }\r\n}\r\n\r\nexport default new Auth();","class URL{\r\n    constructor(){\r\n        this.isDev = false;\r\n    }\r\n    getUrl(){\r\n        if(this.isDev)\r\n        {\r\n            return \"http://localhost:3000/\";\r\n        }\r\n        return \"https://my-fun-retro.herokuapp.com/\";\r\n    }\r\n}\r\n\r\nexport default new URL();\r\n","import { Button, createMuiTheme, CssBaseline, Grid, makeStyles, MuiThemeProvider, Paper, TextField, Typography } from '@material-ui/core';\r\nimport React , {useState} from 'react';\r\nimport GoogleLogin from 'react-google-login';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport Auth from '../protectedRouteComponent/authentication';\r\nimport URL from '../url';\r\n\r\nconst useStyles = makeStyles({\r\n    paperContainer: {\r\n        paddingTop: '3em',\r\n        paddingLeft: '1em',\r\n        paddingRight: '1em',\r\n        paddingBottom: '1em'\r\n    },\r\n    googleLoginBtn:{\r\n        marginTop: '1em',\r\n        width: '100%'\r\n    }\r\n});\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiCssBaseline: {\r\n          \"@global\": {\r\n            body: {\r\n              backgroundImage:\r\n              `url(${\"/crossword.png\"})`\r\n            }\r\n          }\r\n        }\r\n      }\r\n})\r\n\r\nexport default function Login(props){\r\n    const [loginData,setLoginData] = useState({\r\n        username: '',\r\n        password: ''\r\n    });\r\n    const [message,setMessage] = useState('');\r\n    const classes = useStyles();\r\n\r\n\r\n    const submitLogin = async (e) => {\r\n        e.preventDefault();\r\n        if(loginData.username === '' || loginData.password === '' )\r\n        {\r\n            return setMessage(\"Username or password is empty\");\r\n        }\r\n        const response = await fetch(URL.getUrl()+\"login\",{\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n            username: loginData.username,\r\n            password: loginData.password,\r\n            })});\r\n        \r\n        if(response.ok)\r\n        {\r\n            response.json().then(data => {\r\n            if(data !== undefined)\r\n            {\r\n                localStorage.setItem('token',data.token); \r\n                Auth.logIn(() => {\r\n                    props.history.push(\"/boards\");\r\n                  });               \r\n            }});\r\n\r\n        }\r\n        else\r\n        {\r\n            setMessage('Username or password is not correct')\r\n        }\r\n    }\r\n\r\n    const onChangeUsername = (e) =>{\r\n        setLoginData({\r\n            username: e.target.value,\r\n            password: loginData.password\r\n        })\r\n    };\r\n\r\n    const onChangePassword = (e) =>{\r\n        setLoginData({\r\n            username: loginData.username,\r\n            password: e.target.value\r\n        })\r\n    };\r\n    const responseGoogle = async (response) => {\r\n        const data = await fetch(URL.getUrl() + \"login/auth/google\",{\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n            data: response.profileObj\r\n        })});\r\n        const result = await data.json();\r\n        localStorage.setItem(\"token\",result.token);\r\n        Auth.logIn(() => {\r\n            props.history.push(\"/boards\");\r\n          });   \r\n      }\r\n       \r\n    return (\r\n        <>\r\n            <MuiThemeProvider theme = {theme}>\r\n                <CssBaseline></CssBaseline>\r\n                <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\" style={{height: '100vh'}}>\r\n                    <Grid item >\r\n                        <Typography variant={\"h4\"}>My Fun Retro</Typography>\r\n                    </Grid>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <Grid item lg={4}>\r\n                        <Paper elevation={3} className={classes.paperContainer}>\r\n                            <Typography style={{textAlign: 'center'}}>Login</Typography>\r\n                            <form onSubmit={submitLogin}>\r\n                                <TextField onChange={onChangeUsername} name=\"username\" label=\"Username\" fullWidth>\r\n                                </TextField>\r\n                                <TextField onChange={onChangePassword} name=\"password\" label=\"Password\" type=\"password\" fullWidth>\r\n                                </TextField>\r\n                                <br></br>\r\n                                <Typography style={{color: 'red'}}>{message}</Typography>\r\n                                <br></br>\r\n                                <Button variant=\"contained\" color=\"primary\" fullWidth type=\"submit\">\r\n                                    Login\r\n                                </Button>\r\n                                <GoogleLogin className={classes.googleLoginBtn} clientId=\"2151266097-ph08uuide4f1kcbihia8v1idfp2qt3vj.apps.googleusercontent.com\"\r\n                                buttonText=\"Login with Google\"\r\n                                onSuccess={responseGoogle}\r\n                                onFailure={responseGoogle}\r\n                                cookiePolicy={'single_host_origin'}></GoogleLogin>\r\n                                <br></br>\r\n                                <br></br>\r\n                                <Typography style={{textAlign: 'center'}}>or <Link to=\"/register\">Register</Link> </Typography>\r\n                            </form>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </MuiThemeProvider>\r\n        </>);\r\n}","import { AppBar, Button, ClickAwayListener, Grow, makeStyles, MenuItem, MenuList, Paper, Popper, Toolbar, Typography } from '@material-ui/core';\r\nimport React , {useState, useEffect, useRef} from 'react'\r\nimport { useHistory , Link} from 'react-router-dom';\r\nimport Auth from '../protectedRouteComponent/authentication';\r\nimport URL from '../url';\r\n\r\nconst useStyles = makeStyles({\r\n    background: {\r\n        backgroundColor: '#2196f3',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    whiteColor: {\r\n        color: '#ffffff'\r\n    }\r\n})\r\n\r\nexport default function Header(props){\r\n    const [open, setOpen] = useState(false);\r\n    const [userName,setUserName] = useState('');\r\n    const history = useHistory();\r\n    const anchorRef = useRef(null);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n      const getData = async () => {\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        const data = await fetch(URL.getUrl()+\"user\",{\r\n             method: 'GET',\r\n             headers: new Headers({'Content-Type': 'application/x-www-form-urlencoded',\r\n             'Authorization' : bearer}),\r\n         })\r\n         const result = await data.json();\r\n          setUserName(result.user[0].username);\r\n      }\r\n      getData();\r\n   }, []);\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClickProfile = () => {\r\n        history.push('/user');\r\n    }\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n        return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleClickLogout = () => {\r\n      localStorage.removeItem(\"token\");\r\n      Auth.logOut(()=>{\r\n        history.push(\"/\");\r\n      });\r\n    }\r\n\r\n    function handleListKeyDown(event) {\r\n        if (event.key === 'Tab') {\r\n        event.preventDefault();\r\n        setOpen(false);\r\n        }\r\n    }\r\n\r\n    // return focus to the button when we transitioned from !open -> open\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n        anchorRef.current.focus();\r\n        }\r\n\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n\r\n    return (\r\n        <AppBar position=\"static\" className = {classes.background}>\r\n        <Toolbar>\r\n            <Typography className = {classes.title} variant=\"h6\">\r\n                <Link to=\"/boards\" className={classes.whiteColor}>My Fun Retro</Link>\r\n            </Typography>\r\n            <div>\r\n              <Button\r\n                ref={anchorRef}\r\n                aria-controls={open ? 'menu-list-grow' : undefined}\r\n                aria-haspopup=\"true\"\r\n                onClick={handleToggle}\r\n                className={classes.whiteColor}\r\n              >\r\n                {userName}\r\n              </Button>\r\n              <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n                {({ TransitionProps, placement }) => (\r\n                  <Grow\r\n                    {...TransitionProps}\r\n                    style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\r\n                  >\r\n                    <Paper>\r\n                      <ClickAwayListener onClickAway={handleClose}>\r\n                        <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\r\n                          <MenuItem onClick={handleClickProfile}>Profile</MenuItem>\r\n                          <MenuItem onClick={handleClickLogout}>Logout</MenuItem>\r\n                        </MenuList>\r\n                      </ClickAwayListener>\r\n                    </Paper>\r\n                  </Grow>\r\n                )}\r\n              </Popper>\r\n            </div>\r\n        </Toolbar>\r\n    </AppBar>);\r\n}\r\n\r\n","import React , {useState,useEffect} from 'react';\r\nimport { createMuiTheme, makeStyles } from '@material-ui/core/styles';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';import Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport { Container, CssBaseline, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, MuiThemeProvider, TextField } from '@material-ui/core';\r\nimport './index.css';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport {useHistory} from 'react-router-dom';\r\nimport Header from '../headerComponent/index';\r\nimport URL from '../url';\r\n\r\nconst useStyles = makeStyles({\r\n    container:{\r\n        padding:  40,\r\n    },\r\n    myBoardStyle: {\r\n        fontWeight: 'bold',\r\n        color: '#283593', \r\n    },\r\n    functionBar:{\r\n        backgroundColor: '#FFFFFF',\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        paddingTop: 10,\r\n        paddingBottom: 10,\r\n    },\r\n    addBoardStyle:{\r\n        borderStyle: 'dashed',\r\n        borderWidth: 2,\r\n        borderColor: '#ccc',\r\n        margin: 10\r\n    },\r\n    addBoardIcon:{\r\n        color: '#8e24aa',\r\n        fontSize: 60,\r\n        display: 'block',\r\n        display: 'inline',\r\n    },\r\n    deleteBoardBtn: {\r\n        float: 'right',\r\n        background: 'none',\r\n        border: 'none',\r\n        opacity: '0.5',\r\n        '&:hover': {\r\n            background: '#cccccc'\r\n        }\r\n    }\r\n});\r\n\r\nconst theme = createMuiTheme({\r\n    spacing: 10,\r\n    palette: {\r\n        background: {\r\n          default: \"#F3F3F3\",\r\n        }\r\n  \r\n      },\r\n})\r\n\r\n\r\nexport default function Boards(props) {\r\n    const [rawBoardsData,setRawBoardsData] = useState([]); //state for data after fetching\r\n    const [boardsData, setBoardsData] = useState([]);  //state for data when searching boards\r\n    const [open, setOpen] = useState(false)\r\n    const [boardName, setBoardName] = useState('');\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n     useEffect(() => {\r\n        const getBoardData = async () => {\r\n            const bearer = 'Bearer ' + localStorage.getItem('token');\r\n            const data = await fetch(URL.getUrl()+\"boards\",{\r\n                method: 'GET',\r\n                headers: new Headers({'Content-Type': 'application/x-www-form-urlencoded',\r\n                'Authorization' : bearer}),\r\n            })\r\n            const result = await data.json();\r\n            setRawBoardsData(result.boards);\r\n            setBoardsData(result.boards);\r\n        }\r\n        getBoardData();\r\n     }, []);\r\n\r\n      const options = {\r\n        scales: {\r\n            xAxes: [\r\n                {\r\n                  ticks: {\r\n                    beginAtZero: true,\r\n                    display: false,\r\n                  },\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                },\r\n              ],\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                        display: false,\r\n                        reverse: true,\r\n                    },\r\n                    gridLines: {\r\n                        display: false,\r\n                      },\r\n                },\r\n            ],\r\n        },\r\n        legend: {\r\n            display: false\r\n         },\r\n      }\r\n      const getData = (value) => ({\r\n        labels: ['Went Well', 'To Improve', 'Action Items'],\r\n        datasets: [\r\n          {\r\n            data: [parseInt(value.count) , parseInt(value.count2) , parseInt(value.count3)],\r\n            backgroundColor: [\r\n              '#009688',\r\n              '#e91e63',\r\n              '#9c27b0',\r\n            ],                                        \r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n    })\r\n\r\n    const onTextChanging = (e) => {\r\n        const textSearch = e.target.value;\r\n        const rawData = [...rawBoardsData];\r\n        const filtedData = rawData.filter(data => data.name.toLowerCase().includes(textSearch.toLowerCase()));\r\n        setBoardsData(filtedData);\r\n    }\r\n\r\n    const onClickAddNewBoard = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n\r\n    const handleBoardNameChange = (e) => {\r\n        setBoardName(e.target.value);\r\n    }\r\n\r\n    const handleSubmitCreate = async (e) => {\r\n        e.preventDefault();\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        const response = await fetch(URL.getUrl()+\"boards/create\",{\r\n        mode: 'cors',\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': bearer\r\n        },\r\n        body: JSON.stringify({\r\n            name: boardName\r\n        })});\r\n        response.json().then(data => {\r\n            history.push('/boards/info?id='+data.success);\r\n        })\r\n    }\r\n        \r\n    const onClickInfoBoard = (id) => {\r\n        history.push('/boards/info?id='+id);\r\n    }\r\n\r\n    const handleClickDeleteBoard = async (i) => {\r\n        if(window.confirm(\"Do you want to delete this board?\")){\r\n            const url = URL.getUrl()+\"boards/delete?id=\" + i;\r\n            const bearer = 'Bearer ' + localStorage.getItem('token');\r\n            await fetch(url,{\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': bearer\r\n            }});\r\n            const temptBoard = [...rawBoardsData];\r\n            temptBoard.forEach((item,key) => {\r\n                if(item.id === i)\r\n                {\r\n                    temptBoard.splice(key,1);\r\n                }\r\n            });\r\n\r\n            setRawBoardsData(temptBoard);\r\n            setBoardsData(temptBoard);\r\n        }\r\n    }\r\n\r\n    return (\r\n    <>\r\n        <Header></Header>\r\n        <MuiThemeProvider theme = {theme}>\r\n            <CssBaseline></CssBaseline>\r\n            <Container maxWidth = 'lg' className={classes.container}>\r\n                <Typography variant=\"h5\" className={classes.myBoardStyle}>My boards</Typography>\r\n                <div className={classes.functionBar}>\r\n                    <div className={classes.margin}>\r\n                        <Grid container spacing={1} alignItems=\"flex-end\">\r\n                        <Grid item>\r\n                            <SearchIcon />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <TextField label=\"Searching boards\" onChange={onTextChanging} />\r\n                        </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </div>\r\n                <br/><br/>\r\n                <Typography variant=\"h6\" className={classes.myBoardStyle}>Public boards</Typography><br/>\r\n                    <Grid container spacing={3}>\r\n                        <Grid onClick={onClickAddNewBoard} id=\"add-board-block\" item xs = {12} sm = {4} md = {3} lg ={2} className = {classes.addBoardStyle}>                            \r\n                            <p className = \"text-align-center\"><AddCircleIcon className={classes.addBoardIcon}></AddCircleIcon></p>\r\n                            <p className={[\"text-align-center\",\"purpleText\"].join(' ')}><b>Add board</b></p>              \r\n                        </Grid>\r\n                        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">                           \r\n                            <DialogTitle id=\"form-dialog-title\">Create new board</DialogTitle>\r\n                            <DialogContentText style={{marginLeft: '1em',marginRight: '1em'}}>\r\n                                Create your own board making your life more orderly...\r\n                            </DialogContentText>\r\n                            <form onSubmit={handleSubmitCreate}>\r\n                                <DialogContent>\r\n                                    <TextField\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"name\"\r\n                                        label=\"Board name\"\r\n                                        type=\"text\"\r\n                                        fullWidth\r\n                                        onChange = {handleBoardNameChange}\r\n                                    />\r\n                                </DialogContent>\r\n                                <DialogActions>\r\n                                <Button onClick={handleClose} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button color=\"primary\" type=\"submit\">\r\n                                    Create\r\n                                </Button>\r\n                                </DialogActions>\r\n                            </form>\r\n                        </Dialog>\r\n                        {boardsData.map((value,key) => (\r\n                            <Grid  id=\"grid-item\" key ={key} item xs = {12} sm = {4} md = {3} lg ={2} style={{wordWrap: 'break-word',backgroundColor: '#FFFFFF', margin: 10}}>\r\n                                <Grid onClick={ () => onClickInfoBoard(value.id)}>\r\n                                    <Typography style={{color: '#626262'}}>{value.name}</Typography>\r\n                                    <Typography style={{color: '#a8a8a8', fontSize: '0.75rem'}}><ScheduleIcon style={{fontSize: '0.75rem'}}></ScheduleIcon> {value.date.toLocaleString('default', { month: 'long' })} <span style={{float: 'right'}}>{parseInt(value.count) + parseInt(value.count2) + parseInt(value.count3)} cards</span></Typography>\r\n                                    <hr style={{clear: 'left'}}/>     \r\n                                    <Bar data={getData(value)} options={options} /> \r\n                                </Grid>\r\n                                <Grid>\r\n                                    <button onClick={() => handleClickDeleteBoard(value.id)} className={classes.deleteBoardBtn}><DeleteOutlineIcon></DeleteOutlineIcon></button>\r\n                                </Grid>\r\n                            </Grid>\r\n                           \r\n                        ))}\r\n                    </Grid>\r\n\r\n            </Container>\r\n        </MuiThemeProvider>\r\n    </>\r\n  );\r\n}","import React from 'react'\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport Auth from './authentication';\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={routeProps =>\r\n          {\r\n            if(Auth.isAuthenticated())\r\n            {\r\n              return <Component {...routeProps}></Component>;\r\n            }\r\n            else\r\n            {\r\n              return <Redirect to= \"/\"></Redirect>\r\n            }\r\n          }\r\n      }\r\n    />\r\n  );\r\n}","import { Button, createMuiTheme, CssBaseline, Grid, makeStyles, MuiThemeProvider, Paper, TextField, Typography } from '@material-ui/core';\r\nimport React , {useState} from 'react';\r\nimport URL from '../url';\r\n\r\nconst useStyles = makeStyles({\r\n    paperContainer: {\r\n        paddingTop: '3em',\r\n        paddingLeft: '1em',\r\n        paddingRight: '1em',\r\n        paddingBottom: '1em'\r\n    }\r\n});\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiCssBaseline: {\r\n          \"@global\": {\r\n            body: {\r\n              backgroundImage:\r\n              `url(${\"/crossword.png\"})`\r\n            }\r\n          }\r\n        }\r\n      }\r\n})\r\n\r\nexport default function Register(props){\r\n    const classes = useStyles();\r\n    const [registerData,setRegisterData] = useState({\r\n        username: '',\r\n        email: '',\r\n        password: ''\r\n    });\r\n    const [message,setMessage] = useState('');\r\n    const [isSuccess,setIsSuccess] = useState(false);\r\n\r\n    const submitRegister = async (e) => {\r\n        e.preventDefault();\r\n        const response = await fetch(URL.getUrl()+\"register\",{\r\n        mode: 'cors',\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          username: registerData.username,\r\n          email: registerData.email,\r\n          password: registerData.password,\r\n        })});\r\n        const data = await response.json()\r\n        if(data === 'username exist')\r\n        {\r\n            setMessage('Username existed, please try another');\r\n            setIsSuccess(false);\r\n        }\r\n        if(data === 'email exist')\r\n        {\r\n            setMessage('Email existed, please try another');\r\n            setIsSuccess(false);\r\n\r\n        }\r\n        if(data === 'success')\r\n        {\r\n            setIsSuccess(true);\r\n            setMessage(\"Register successfully\");\r\n        }\r\n    }\r\n\r\n    const onChangeUsername = (e) =>{\r\n        setRegisterData({\r\n            username: e.target.value,\r\n            email: registerData.email,\r\n            password: registerData.password\r\n        })\r\n    };\r\n\r\n    const onChangeEmail = (e) =>{\r\n        setRegisterData({\r\n            username: registerData.username,\r\n            email: e.target.value,\r\n            password: registerData.password\r\n        })\r\n    };\r\n\r\n    const onChangePassword = (e) =>{\r\n        setRegisterData({\r\n            username: registerData.username,\r\n            email: registerData.email,\r\n            password: e.target.value\r\n        })\r\n    };\r\n    return (\r\n        <>\r\n            <MuiThemeProvider theme = {theme}>\r\n                <CssBaseline></CssBaseline>\r\n                <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\" style={{height: '100vh'}}>\r\n                    <Grid item >\r\n                        <Typography variant={\"h4\"}>My Fun Retro</Typography>\r\n                    </Grid>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <Grid item lg={4}>\r\n                        <Paper elevation={3} className={classes.paperContainer}>\r\n                            <Typography style={{textAlign: 'center'}}>Register</Typography>\r\n                            <form onSubmit={submitRegister}>\r\n                                <TextField onChange={onChangeUsername} name=\"username\" label=\"Username\" fullWidth>\r\n                                </TextField>\r\n                                <TextField onChange={onChangeEmail} name=\"email\" label=\"Email\" type=\"text\"  fullWidth>\r\n                                </TextField>\r\n                                <TextField onChange={onChangePassword} name=\"password\" label=\"Password\" type=\"password\" fullWidth>\r\n                                </TextField>\r\n                        \r\n                                <br></br>\r\n                                <Typography style={ isSuccess? {color: 'blue'} : {color: 'red'}}>{message}</Typography>\r\n                                <br></br>\r\n\r\n                                <Button variant=\"contained\" color=\"primary\" fullWidth type=\"submit\">\r\n                                    Register\r\n                                </Button>\r\n                                <br></br>\r\n                                <br></br>\r\n                                <Typography style={{textAlign: 'center'}}>or <a href=\"/\">Login</a> </Typography>\r\n                            </form>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </MuiThemeProvider>\r\n        </>);\r\n}","import React from 'react';\r\nimport {Button, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    itemBoard:{\r\n        borderWidth: '1px',\r\n        borderColor: 'black',\r\n        borderStyle: 'solid',\r\n        marginBottom: '1em',\r\n        backgroundColor: '#009688',\r\n        maxWidth: '100%',\r\n        paddingTop: '0.2em',\r\n        paddingLeft: '0.2em',\r\n        paddingRight: '0.2em'\r\n    },\r\n    whiteColor: {\r\n        color: '#ffffff'\r\n    },\r\n    textFieldContainer: {\r\n        width: '100%',\r\n        backgroundColor: '#ffffff'\r\n    },\r\n    contentStyle: {\r\n        width: '100',\r\n        wordWrap: 'break-word'\r\n    },\r\n    addButton : {\r\n        backgroundColor: '#cccccc',\r\n        marginBottom: '1em',\r\n    },\r\n    squareColor:{\r\n        color: '#009688'\r\n    },\r\n    doneButton: {\r\n        borderWidth: '1px',\r\n        borderColor: '#ffffff',\r\n        borderStyle: 'solid',\r\n        backgroundColor: 'transparent',\r\n        color: '#ffffff',\r\n        borderRadius: '5px',\r\n        '&:hover': {\r\n            backgroundColor: '#ffffff',\r\n            color: 'black'\r\n        }\r\n    }\r\n});\r\n\r\n\r\nexport default function WellColumn({well,listChangeWell,handleAdd,handleChangeContentClick,handleChangeContent,handleChangeTextDone,handleDelete})\r\n{\r\n    const classes = useStyles();\r\n    return (<>\r\n        <Typography> <StopIcon className={classes.squareColor}></StopIcon>Went Well </Typography>\r\n            <Grid container direction=\"column\">\r\n                <Grid onClick={() => handleAdd('wells')} item>\r\n                    <Button className={classes.addButton} fullWidth>+</Button>\r\n                </Grid>\r\n                {well.map((value,key) => (\r\n                    <Grid item key={key} className={[classes.itemBoard,classes.whiteColor].join(' ')}>\r\n                        {\r\n                        value.id.toString().includes('T') ?\r\n                        <>\r\n                            <TextField className={classes.textFieldContainer} multiline rowsMax={4} value={value.content} id={'wells'+key.toString()} onChange={handleChangeContent}></TextField>\r\n                            <p><button id={\"Done_wells_\"+key.toString()+\"_\"+value.id} onClick={handleChangeTextDone}>Done</button> <span style={{float:'right'}}><DeleteIcon onClick={() => handleDelete(\"wells\",value.id)}></DeleteIcon></span></p>\r\n                            \r\n                        </> :\r\n                        listChangeWell.includes(value.id) ?\r\n                        <>\r\n                            <TextField className={classes.textFieldContainer} multiline rowsMax={4} value={value.content} id={'wells_'+key.toString()} onChange={handleChangeContent}></TextField>\r\n                            <p><button className={classes.doneButton} id={\"Done_wells_\"+key.toString()+\"_\"+value.id} onClick={handleChangeTextDone}>Done</button> <span style={{float:'right'}}><DeleteIcon onClick={() => handleDelete(\"wells\",value.id)}></DeleteIcon></span></p>\r\n                         \r\n                        </> :\r\n                        <>\r\n                            <Button style={{float:'right'}}><EditIcon className={classes.whiteColor} onClick={() => handleChangeContentClick('wells',value.id)}></EditIcon></Button>\r\n                            <Typography className={classes.contentStyle} style={{clear:'right'}}>{value.content}</Typography>\r\n                        </>}\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n    </>);\r\n}","import React from 'react';\r\nimport {Button, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    itemBoard:{\r\n        borderWidth: '1px',\r\n        borderColor: 'black',\r\n        borderStyle: 'solid',\r\n        marginBottom: '1em',\r\n        backgroundColor: '#e91e63',\r\n        maxWidth: '100%',\r\n        paddingTop: '0.2em',\r\n        paddingLeft: '0.2em',\r\n        paddingRight: '0.2em'\r\n    },\r\n    whiteColor: {\r\n        color: '#ffffff'\r\n    },\r\n    textFieldContainer: {\r\n        width: '100%',\r\n        backgroundColor: '#ffffff'\r\n    },\r\n    contentStyle: {\r\n        width: '100',\r\n        wordWrap: 'break-word'\r\n    },\r\n    addButton : {\r\n        backgroundColor: '#cccccc',\r\n        marginBottom: '1em',\r\n    },\r\n    squareColor:{\r\n        color: '#e91e63',\r\n    },\r\n    doneButton: {\r\n        borderWidth: '1px',\r\n        borderColor: '#ffffff',\r\n        borderStyle: 'solid',\r\n        backgroundColor: 'transparent',\r\n        color: '#ffffff',\r\n        borderRadius: '5px',\r\n        '&:hover': {\r\n            backgroundColor: '#ffffff',\r\n            color: 'black'\r\n        }\r\n    }\r\n});\r\n\r\n\r\nexport default function ImproveColumn({improve,listChangeImprove,handleAdd,handleChangeContentClick,handleChangeContent,handleChangeTextDone,handleDelete}){\r\n    const classes = useStyles();\r\n    return (<><Typography>  <StopIcon className={classes.squareColor}></StopIcon>To Improve</Typography>\r\n        <Grid container direction=\"column\">\r\n            <Grid onClick={() => handleAdd(\"improves\")} item>\r\n                <Button className={classes.addButton} fullWidth>+</Button>\r\n            </Grid>\r\n            {improve.map((value,key) => (\r\n                <Grid item key={key} className={[classes.itemBoard,classes.whiteColor].join(' ')}>\r\n                    {\r\n                    value.id.toString().includes('T') ?\r\n                    <>\r\n                        <TextField className={classes.textFieldContainer} multiline rowsMax={4} value={value.content} id={'improves_'+key.toString()} onChange={handleChangeContent}></TextField>\r\n                        <p><button id={\"Done_improves_\"+key.toString()+\"_\"+value.id} onClick={handleChangeTextDone}>Done</button> <span style={{float:'right'}}><DeleteIcon onClick={() => handleDelete(\"improves\",value.id)}></DeleteIcon></span></p>\r\n                    </> :\r\n                    listChangeImprove.includes(value.id) ?\r\n                    <>\r\n                        <TextField className={classes.textFieldContainer} multiline rowsMax={4} value={value.content} id={'improves_'+key.toString()} onChange={handleChangeContent}></TextField>\r\n                        <p><button className={classes.doneButton} id={\"Done_improves_\"+key.toString()+\"_\"+value.id} onClick={handleChangeTextDone}>Done</button> <span style={{float:'right'}}><DeleteIcon onClick={() => handleDelete(\"improves\",value.id)}></DeleteIcon></span></p>\r\n                    </> :\r\n                    <>\r\n                        <Button style={{float:'right'}}><EditIcon className={classes.whiteColor} onClick={() => handleChangeContentClick('improves',value.id)}></EditIcon></Button>\r\n                        <Typography className={classes.contentStyle} style={{clear:'right'}}>{value.content}</Typography>\r\n                    </>}\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    </>);\r\n}","import React from 'react';\r\nimport {Button, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    itemBoard:{\r\n        borderWidth: '1px',\r\n        borderColor: 'black',\r\n        borderStyle: 'solid',\r\n        marginBottom: '1em',\r\n        backgroundColor: '#9c27b0',\r\n        maxWidth: '100%',\r\n        paddingTop: '0.2em',\r\n        paddingLeft: '0.2em',\r\n        paddingRight: '0.2em'\r\n    },\r\n    whiteColor: {\r\n        color: '#ffffff'\r\n    },\r\n    textFieldContainer: {\r\n        width: '100%',\r\n        backgroundColor: '#ffffff'\r\n    },\r\n    contentStyle: {\r\n        width: '100',\r\n        wordWrap: 'break-word'\r\n    },\r\n    addButton : {\r\n        backgroundColor: '#cccccc',\r\n        marginBottom: '1em',\r\n    },\r\n    squareColor:{\r\n        color: '#9c27b0',\r\n    },\r\n    doneButton: {\r\n        borderWidth: '1px',\r\n        borderColor: '#ffffff',\r\n        borderStyle: 'solid',\r\n        backgroundColor: 'transparent',\r\n        color: '#ffffff',\r\n        borderRadius: '5px',\r\n        '&:hover': {\r\n            backgroundColor: '#ffffff',\r\n            color: 'black'\r\n        }\r\n    }\r\n});\r\n\r\n\r\nexport default function ActionColumn({action,listChangeAction,handleAdd,handleChangeContentClick,handleChangeContent,handleChangeTextDone,handleDelete}){\r\n    const classes = useStyles();\r\n    return (<><Typography>  <StopIcon className={classes.squareColor}></StopIcon>Action Items</Typography>\r\n        <Grid onClick={() => handleAdd('actions')} item>\r\n            <Button className={classes.addButton} fullWidth>+</Button>\r\n        </Grid>\r\n        <Grid container direction=\"column\">\r\n            {action.map((value,key) => (\r\n                <Grid item key={key} className={[classes.itemBoard,classes.whiteColor].join(' ')}>\r\n                    {\r\n                    value.id.toString().includes('T') ?\r\n                    <>\r\n                        <TextField className={classes.textFieldContainer} multiline  value={value.content} id={'actions_'+key.toString()} onChange={handleChangeContent}></TextField>\r\n                        <p><button id={\"Done_actions_\"+key.toString()+\"_\"+value.id} onClick={handleChangeTextDone}>Done</button> <span style={{float:'right'}}><DeleteIcon onClick={() => handleDelete(\"actions\",value.id)}></DeleteIcon></span></p>\r\n                    </> :\r\n                    listChangeAction.includes(value.id) ?\r\n                    <>\r\n                        <TextField className={classes.textFieldContainer} multiline  value={value.content} id={'actions_'+key.toString()} onChange={handleChangeContent}></TextField>\r\n                        <p><button className={classes.doneButton} id={\"Done_actions_\"+key.toString()+\"_\"+value.id} onClick={handleChangeTextDone}>Done</button> <span style={{float:'right'}}><DeleteIcon onClick={() => handleDelete(\"actions\",value.id)}></DeleteIcon></span></p>\r\n                    </> :\r\n                    <>\r\n                        <Button style={{float:'right'}}><EditIcon className={classes.whiteColor} onClick={() => handleChangeContentClick('actions',value.id)}></EditIcon></Button>\r\n                        <Typography className={classes.contentStyle} style={{clear:'right'}}>{value.content}</Typography>\r\n                    </>}\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    </>);\r\n}","import React from 'react';\r\nimport {Grid, makeStyles} from '@material-ui/core';\r\nimport WellColumn from './wellItemComponent';\r\nimport ImproveColumn from './improveItemComponent';\r\nimport ActionColumn from './actionItemComponent';\r\n\r\nconst useStyles = makeStyles({\r\n    boardContainer: {\r\n        paddingTop: '1em',\r\n        paddingLeft: '1em',\r\n        paddingRight: '1em',\r\n   \r\n    },\r\n});\r\n\r\nexport default function BoardItems({well,improve,action,\r\n    handleAdd, handleChangeContentClick,\r\n    listChangeWell,listChangeImprove,listChangeAction,\r\n    handleChangeContent,\r\n    handleChangeTextDone,\r\n    handleDelete})\r\n{\r\n    const classes = useStyles();\r\n    return (<>\r\n        <Grid item xs={12} sm={4} md={4} lg={4} className={classes.boardContainer}>\r\n            <WellColumn well={well} listChangeWell={listChangeWell} handleAdd={handleAdd} handleChangeContentClick={handleChangeContentClick} handleChangeContent={handleChangeContent} handleChangeTextDone={handleChangeTextDone} handleDelete={handleDelete}></WellColumn>\r\n        </Grid>\r\n        <Grid item xs={12} sm={4} md={4} lg={4} className={classes.boardContainer}>\r\n            <ImproveColumn improve={improve} listChangeImprove={listChangeImprove} handleAdd={handleAdd} handleChangeContentClick={handleChangeContentClick} handleChangeContent={handleChangeContent} handleChangeTextDone={handleChangeTextDone} handleDelete={handleDelete}></ImproveColumn>\r\n        </Grid>\r\n        <Grid item xs={12} sm={4} md={4} lg={4} className={classes.boardContainer}>\r\n            <ActionColumn action={action} listChangeAction={listChangeAction} handleAdd={handleAdd} handleChangeContentClick={handleChangeContentClick} handleChangeContent={handleChangeContent} handleChangeTextDone={handleChangeTextDone} handleDelete={handleDelete}></ActionColumn>\r\n        </Grid>\r\n    </>);\r\n}","import {Button, Grid, makeStyles, TextField } from '@material-ui/core';\r\nimport React , {useState,useEffect} from 'react'\r\nimport { useLocation} from 'react-router-dom';\r\nimport Header from '../headerComponent';\r\nimport BoardItems from '../boardItemsComponent';\r\nimport URL from '../url';\r\n\r\nconst useStyles = makeStyles({\r\n    background: {\r\n        backgroundColor: '#2196f3',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    boardContainer: {\r\n        marginTop: '1.5em',\r\n      \r\n    },\r\n    itemBoard:{\r\n        borderWidth: '1px',\r\n        borderColor: 'black',\r\n        borderStyle: 'solid',\r\n        marginRight: '1em'\r\n    },\r\n    changeNameButton: {\r\n        marginLeft: '1em',\r\n        backgroundColor: '#00c853',\r\n        color: '#ffffff',\r\n        '&:hover': {\r\n            backgroundColor: '#00a946',\r\n            color: '#ffffff',\r\n        }\r\n    },\r\n    textFieldChangeName:{\r\n        marginLeft: '1em'\r\n    }\r\n});\r\n\r\n\r\n\r\nexport default function DetailBoard(props){   \r\n    const [idBoard,setIDBoard] = useState(0);\r\n    const [nameBoard, setNameBoard] = useState('');\r\n    const [well,setWell] = useState([]);\r\n    const [improve,setImprove] = useState([]);\r\n    const [action,setAction] = useState([]);\r\n    const [listChangeWell,setListChangeWell] = useState([]);\r\n    const [listChangeImprove,setListChangeImprove] = useState([]);\r\n    const [listChangeAction,setListChangeAction] = useState([]);\r\n    const [tempId,setTempId] = useState(0);\r\n    const useQuery = () => {\r\n        return new URLSearchParams(useLocation().search);\r\n    }\r\n    const classes = useStyles();\r\n    const query = useQuery();\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            const bearer = 'Bearer ' + localStorage.getItem('token');\r\n            const data = await fetch(URL.getUrl()+\"boards/\"+ query.get('id'),{\r\n                method: 'GET',\r\n                headers: new Headers({'Content-Type': 'application/x-www-form-urlencoded',\r\n                'Authorization' : bearer})});\r\n            const result = await data.json();\r\n            setIDBoard(result[0].id);\r\n            setNameBoard(result[0].name)\r\n            setWell(result[0].Wells);\r\n            setImprove(result[0].Improves);\r\n            setAction(result[0].Actions);\r\n        }\r\n        getData();\r\n    }, []);\r\n\r\n    const upsertContent = async (tableName,object) => {\r\n        const id = object.id;\r\n        if(id.toString().includes('T'))\r\n        {\r\n            object = {...object, id: ''};\r\n        }\r\n        const idWell =  object.id !== undefined ? object.id : '';\r\n        const wellContent = object.content.trim().replaceAll(' ','+');\r\n        const url = URL.getUrl()+\"boards/\" + idBoard.toString() + \"/\" + tableName + \"?id=\"+ idWell +\"&content=\" + wellContent;\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        const response = await fetch(url,{\r\n        mode: 'cors',\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': bearer\r\n        }}); \r\n        const data = await response.json();\r\n        if(tableName === 'wells')\r\n        {\r\n            const tempWell = well.slice();\r\n            tempWell.forEach(element => {\r\n                if(element.id.toString() === id.toString())\r\n                {\r\n                    element.id = data.id;\r\n                }\r\n            });\r\n            setWell(tempWell);\r\n        }\r\n        if(tableName === 'improves')\r\n        {\r\n            const tempImproves = improve.slice();\r\n            tempImproves.forEach(element => {\r\n                if(element.id.toString() === id.toString())\r\n                {\r\n                    element.id = data.id;\r\n                }\r\n            });\r\n            setImprove(tempImproves);\r\n        }\r\n        if(tableName === 'actions')\r\n        {\r\n            const tempActions = action.slice();\r\n            tempActions.forEach(element => {\r\n                if(element.id.toString() === id.toString())\r\n                {\r\n                    element.id = data.id;\r\n                }\r\n            });\r\n            setAction(tempActions);\r\n        }\r\n    }\r\n\r\n    const handleAdd = (className) => {\r\n        const object = {};\r\n        object.content = 'Blank content';\r\n        object.id = 'T' + tempId;\r\n        if(className===\"wells\")\r\n        {\r\n            setWell([object,...well]);\r\n        }\r\n        if(className===\"improves\")\r\n        {\r\n            setImprove([object,...improve]);\r\n        }\r\n        if(className===\"actions\")\r\n        {\r\n            setAction([object,...action]);\r\n        }\r\n        setTempId(tempId+1);        \r\n    }\r\n\r\n    const handleChangeContentClick = (className,i) => {\r\n        if(className===\"wells\")\r\n        {\r\n            setListChangeWell([...listChangeWell,i])\r\n        }\r\n        if(className===\"improves\")\r\n        {\r\n            setListChangeImprove([...listChangeImprove,i])\r\n        }\r\n        if(className===\"actions\")\r\n        {\r\n            setListChangeAction([...listChangeAction,i])\r\n        }\r\n    }\r\n    \r\n\r\n    const handleChangeContent = (e) => {\r\n        const newContent = e.target.value;\r\n        const className = e.target.id.split('_')[0];\r\n        const id = e.target.id.split('_')[1];\r\n        if(className===\"wells\")\r\n        {\r\n            const tempWell = [...well];\r\n            tempWell[id].content = newContent;\r\n            setWell(tempWell);\r\n        }\r\n        if(className===\"improves\")\r\n        {\r\n            const tempImprove = [...improve];\r\n            tempImprove[id].content = newContent;\r\n            setImprove(tempImprove);\r\n        }\r\n        if(className===\"actions\")\r\n        {\r\n            const tempAction = [...action];\r\n            tempAction[id].content = newContent;\r\n            setAction(tempAction);\r\n        }\r\n    }\r\n\r\n\r\n    const handleChangeTextDone = (e) => {\r\n        const splitedId = e.target.id.split('_');\r\n        const columnName = splitedId[1];\r\n        const idOfChangeObjectInList = splitedId[2]; \r\n        const idOfChangeObjectInListChange = parseInt(splitedId[3]); \r\n        let object;\r\n        if(columnName === \"wells\")\r\n        {\r\n            listChangeWell.splice(listChangeWell.indexOf(idOfChangeObjectInListChange),1);\r\n            setListChangeWell([...listChangeWell]);\r\n            object = well[idOfChangeObjectInList]\r\n        }\r\n        if(columnName === \"improves\")\r\n        {\r\n            listChangeImprove.splice(listChangeImprove.indexOf(idOfChangeObjectInListChange),1);\r\n            setListChangeImprove([...listChangeImprove]);\r\n            object = improve[idOfChangeObjectInList]\r\n        }\r\n        if(columnName === \"actions\")\r\n        {\r\n            listChangeAction.splice(listChangeAction.indexOf(idOfChangeObjectInListChange),1);\r\n            setListChangeAction([...listChangeAction]);\r\n            object = action[idOfChangeObjectInList]\r\n        }        \r\n        upsertContent(columnName,object);\r\n    }\r\n\r\n    const deleteInDatabase = async (nameTable,id) => {\r\n        const url = URL.getUrl()+\"boards/\" + idBoard.toString() + \"/\" + nameTable + \"/delete\" + \"?id=\"+ id;\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        await fetch(url,{\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': bearer\r\n        }}); \r\n    }\r\n\r\n    const handleDelete = (nameTable,id) => {\r\n\r\n        if(!id.toString().includes('T'))\r\n            deleteInDatabase(nameTable,id);\r\n\r\n        if(nameTable === \"wells\")\r\n        {\r\n            const tempWell = well.slice();\r\n\r\n            tempWell.forEach((value,i) => {\r\n                if(value.id.toString() === id.toString())\r\n                {\r\n                    tempWell.splice(i,1);   \r\n                }\r\n            })\r\n            setWell(tempWell);\r\n        }\r\n        if(nameTable === \"improves\")\r\n        {\r\n            const tempImprove = improve.slice();\r\n\r\n            tempImprove.forEach((value,i) => {\r\n                if(value.id.toString() === id.toString())\r\n                {\r\n                    tempImprove.splice(i,1);   \r\n                }\r\n            })\r\n            setImprove(tempImprove);\r\n        }\r\n        if(nameTable === \"actions\")\r\n        {\r\n            const tempAction = action.slice();\r\n\r\n            tempAction.forEach((value,i) => {\r\n                if(value.id.toString() === id.toString())\r\n                {\r\n                    tempAction.splice(i,1);   \r\n                }\r\n            })\r\n            setAction(tempAction);\r\n        }\r\n    }\r\n\r\n    const handleChangeNameBoard = (e) => {\r\n        setNameBoard(e.target.value)\r\n    }\r\n\r\n    const handleClickChangeName = async () => {\r\n        const url = URL.getUrl()+\"boards/\" + idBoard.toString() + \"/change\" + \"?id=\"+ idBoard;\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        await fetch(url,{\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': bearer\r\n        },\r\n        body: JSON.stringify({\r\n            name: nameBoard,\r\n        })});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header></Header>\r\n            <br></br>\r\n            <div>\r\n                <TextField className={classes.textFieldChangeName} type=\"text\" value={nameBoard} onChange={handleChangeNameBoard}></TextField>\r\n                <Button size=\"small\" className={classes.changeNameButton} onClick={handleClickChangeName}>Save</Button>\r\n            </div>\r\n            <Grid container className={classes.boardContainer}>\r\n                <BoardItems well={well} improve={improve} action={action}\r\n                handleAdd = {handleAdd} handleChangeContentClick={handleChangeContentClick}\r\n                listChangeWell={listChangeWell} listChangeImprove={listChangeImprove} listChangeAction={listChangeAction}\r\n                handleChangeContent={handleChangeContent}\r\n                handleChangeTextDone={handleChangeTextDone}\r\n                handleDelete={handleDelete}></BoardItems>\r\n            </Grid>\r\n        </>);\r\n}\r\n","import { Button, createMuiTheme, CssBaseline, Grid, Input, Link, makeStyles, MuiThemeProvider, Paper, Typography } from '@material-ui/core';\r\nimport React, {useState, useEffect} from 'react';\r\nimport Header from '../headerComponent';\r\nimport URL from '../url';\r\n\r\nconst useStyles = makeStyles({\r\n    paperContainer: {\r\n        paddingTop: '3em',\r\n        paddingLeft: '1em',\r\n        paddingRight: '1em',\r\n        paddingBottom: '1em'\r\n    },\r\n    infoContainer: {\r\n        marginTop: '1em',\r\n        width: '50%',\r\n        paddingLeft: '1em',\r\n        paddingRight: '1em',\r\n        paddingTop: '1em',\r\n        paddingBottom: '1em'\r\n    },\r\n    changeButton: {\r\n        marginLeft: '1em',\r\n        backgroundColor: '#00c853',\r\n        color: '#ffffff',\r\n        '&:hover': {\r\n            backgroundColor: '#00a946',\r\n            color: '#ffffff',\r\n        }\r\n    },\r\n    profileTitle: {\r\n        textAlign: 'center',\r\n        color: '#0069c0',\r\n        fontStyle: 'bold'\r\n    }\r\n});\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiCssBaseline: {\r\n          \"@global\": {\r\n            body: {\r\n              backgroundImage:\r\n              `url(${\"/crossword.png\"})`\r\n            }\r\n          }\r\n        }\r\n      }\r\n})\r\n\r\n\r\n\r\nexport default function User(props)\r\n{\r\n    const classes = useStyles();\r\n    const [user,setUser] = useState({});\r\n    const [isChangePassword,setIsChangePassword] = useState(false);\r\n    const [message,setMessage] = useState('');\r\n    const [password,setPassword] = useState('');\r\n    const [newPassword,setNewPassword] = useState('');\r\n    const [passwordMessage,setPasswordMessage] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        fetch(URL.getUrl()+\"user\",{\r\n             method: 'GET',\r\n             headers: new Headers({'Content-Type': 'application/x-www-form-urlencoded',\r\n             'Authorization' : bearer}),\r\n         })\r\n         .then(res => res.json())\r\n         .then(\r\n             (result) => {\r\n                setUser(result.user[0]);\r\n             }\r\n         )\r\n     }, []);\r\n\r\n     const handleChangeEmail = (e) => {\r\n         const newEmail = e.target.value;\r\n         const tempUser = {...user};\r\n         const newUser = {...tempUser,email: newEmail};\r\n         setUser(newUser);\r\n     }\r\n\r\n     const handleChangePasswordClick = (e) => {\r\n         setIsChangePassword(!isChangePassword);\r\n     }\r\n\r\n    const handleSubmitChangeInfo = async (e) => {\r\n        console.log(user.email);\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        const url = URL.getUrl()+\"user/\" + user.id.toString() + \"/changeEmail\"; \r\n        console.log(url);\r\n        const response = await fetch(url,{\r\n            mode: 'cors',\r\n            method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'Authorization': bearer,\r\n        },\r\n        body: JSON.stringify({\r\n          email: user.email,\r\n        })});\r\n        response.json().then(data=>{\r\n            if(data===\"success\")\r\n            {\r\n                setMessage(\"Change email successfully\");\r\n            }\r\n            if(data===\"fail\")\r\n            {\r\n                setMessage(\"Email existed\");\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleSubmitChangePassword = async (e) => {\r\n        const bearer = 'Bearer ' + localStorage.getItem('token');\r\n        const url = URL.getUrl()+\"user/\" + user.id.toString() + \"/changePassword\"; \r\n        const response = await fetch(url,{\r\n            mode: 'cors',\r\n            method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'Authorization': bearer\r\n        },\r\n        body: JSON.stringify({\r\n          password: password,\r\n          newpassword: newPassword\r\n        })});\r\n        response.json().then(data => {\r\n            if(data==='success')\r\n            {\r\n                setPasswordMessage(\"Change password successfully\")\r\n            }\r\n            if(data==='fail')\r\n            {\r\n                setPasswordMessage(\"Current password not correct\")\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleChangePassword = (e) => {\r\n        const password = e.target.value;\r\n        setPassword(password);\r\n    }\r\n\r\n    const handleChangeConfirmPassword = (e) => {\r\n        const newPassword = e.target.value;\r\n        setNewPassword(newPassword);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header></Header>\r\n            <MuiThemeProvider theme = {theme}>\r\n                <CssBaseline></CssBaseline>\r\n                <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\">\r\n                    \r\n                    <Paper className={classes.infoContainer}>\r\n                        <Grid item >\r\n                            <Typography variant={\"h4\"} className={classes.profileTitle}>My profile</Typography>\r\n                        </Grid>\r\n                        <Grid item >\r\n                            {isChangePassword ? \r\n                                <div>\r\n                                    <Typography><b>Current password: </b></Typography><Input id=\"current\" type=\"password\"  onChange={handleChangePassword}></Input> \r\n                                    <Typography><b>New password: </b></Typography><Input id=\"new\"  type=\"password\" onChange={handleChangeConfirmPassword}></Input> \r\n                                    <br></br>\r\n                                    <Typography style={{color: 'blue'}}>{passwordMessage}</Typography>\r\n\r\n                                    <br></br>\r\n                                    <Link onClick={handleChangePasswordClick}>Change info?</Link>\r\n                                    <Button size=\"small\" className={classes.changeButton} onClick={handleSubmitChangePassword}>Change</Button>\r\n                                </div>\r\n                                \r\n                            :\r\n                                <div>\r\n                                    <Typography><b>Username:</b> {user.username}</Typography>\r\n                                    <Typography><b>Email: </b></Typography><Input id=\"email\" value={user.email} onChange={handleChangeEmail}></Input> \r\n                                    <br></br>\r\n                \r\n                                    <Typography style={{color: 'blue'}}>{message}</Typography>\r\n                                    <br></br>\r\n                                    <Link onClick={handleChangePasswordClick}>Change password?</Link>\r\n                                    <Button size=\"small\" className={classes.changeButton} onClick={handleSubmitChangeInfo}>Change</Button>\r\n                                </div>\r\n                            }\r\n                        </Grid>\r\n\r\n                    </Paper>\r\n                    \r\n                </Grid>\r\n            </MuiThemeProvider>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport Login from './components/loginComponent';\r\nimport Boards from './components/boardsComponent'\r\nimport PrivateRoute from './components/protectedRouteComponent';\r\nimport Register from './components/registerComponent';\r\nimport DetailBoard from './components/detailABoardComponent';\r\nimport User from './components/userComponent';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Route exact path=\"/\" component={Login}/>\r\n      <PrivateRoute exact path=\"/boards\" component={Boards}></PrivateRoute>\r\n      <PrivateRoute exact path=\"/boards/info\" component={DetailBoard}></PrivateRoute>\r\n      <PrivateRoute exact path=\"/user\" component={User}></PrivateRoute>\r\n      <Route path=\"/register\" component={Register}></Route>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}